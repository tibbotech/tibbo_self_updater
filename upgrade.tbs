include "global.tbh"
include "upgrade.tbh"

dim upload_started as boolean = false
dim current_fw_upg_state as pl_upg_state_t
dim isBtConnected as boolean = false

dim pattern_timer as dword = sys.timercount32
dim led_detect_timer as byte


sub device_firmware_init(source as PL_FW_UPG_SOURCE, number as byte)
	dim i as integer 
 
	current_fw_upg_state.source  = source
	current_fw_upg_state.source_num = number
	current_fw_upg_state.state=PL_FW_UPG__INIT
	current_fw_upg_state.fw_fail_reason = PL_FW_FAIL_NONE
	current_fw_upg_state.fw_numfiles  = 0
	current_fw_upg_state.fw_receivedfiles  = 0	
	for i = 0 TO MAX_NUM_FILE_UPG - 1 
		current_fw_upg_state.fw_types(i) = 0
		current_fw_upg_state.fw_lengths(i) = 0
		current_fw_upg_state.fw_checksums(i) = 0
	next i
	current_fw_upg_state.fw_currentfile = 0
	current_fw_upg_state.fw_total_percent = 0
	current_fw_upg_state.fw_percent = 0
	current_fw_upg_state.fw_remaining = 0 
	current_fw_upg_state.fw_sector =  0
	current_fw_upg_state.fw_page  = 0
	current_fw_upg_state.fw_checksum =0 	
	current_fw_upg_state.fw_total_remaining=0
	
end sub

function hex_mac(mac as string) as string
	dim i as integer = 0
	dim startpos as integer = 1
	dim endpos as integer = 0
	dim num as word = ""
	dim result as string = ""
	
	for i = 0 to 5
		endpos = instr(startpos,mac,".",0)
		num = val(  mid(mac,startpos,  endpos-startpos) )
		if num<>0 then
			result = result + right(hex( num ),2) + ":"
		else
			result = result + "00" + ":"
		end if
		startpos=endpos+1
	next i

	hex_mac = left(result,len(result)-1)

end function

sub device_firmware_download_init()

select case current_fw_upg_state.source
	case PL_FW_UPG_BLE:
		device_firmware_download_init_ble()
		current_fw_upg_state.state = PL_FW_READ_HEADER	
	case PL_FW_UPG_WEB:
		current_fw_upg_state.state = PL_FW_READ_HEADER
	case PL_FW_UPG_SOCK:
		current_fw_upg_state.state = PL_FW_READ_HEADER
	case PL_FW_UPG_SER:
		current_fw_upg_state.state = PL_FW_READ_HEADER
	case else:
		current_fw_upg_state.fw_fail_reason = PL_FW_FAIL_SOURCE_UNKNOWN
		current_fw_upg_state.state = PL_FW_UPG_FAIL
		on_firmware_update_complete(current_fw_upg_state)
end select

end sub

sub init_serial(port as byte, baud as dword)
	
	ser.num=0 
 	ser.enabled=NO
	ser.mode=PL_SER_MODE_UART
	ser.interface=PL_SER_SI_FULLDUPLEX
	set_baudrate(baud)
	ser.flowcontrol=ENABLED
	ser.rtsmap=CTS_MAP
	io.num=CTS_MAP
	io.enabled=YES
	ser.ctsmap=RTS_MAP
	io.num=RTS_MAP
	io.enabled=NO
	ser.interchardelay=0
	ser.parity=PL_SER_PR_NONE
	ser.bits=PL_SER_BB_8
	ser.txbuffrq(4)
	ser.rxbuffrq(sys.freebuffpages-5)
	sys.buffalloc()
	ser.rxclear()
	ser.txclear()
	ser.enabled=YES

end sub

sub init_receive_socket(receive_interface as string)

	dim prevsock as byte=sock.num
	
	sock.num=socket_number.upgrade_socket 'Receiving Socket
	if receive_interface="wifi" then
		sock.targetinterface=PL_SOCK_INTERFACE_WLN
	else if receive_interface="ethernet" then
		sock.targetinterface=PL_SOCK_INTERFACE_NET
	end if
	sock.protocol=PL_SOCK_PROTOCOL_TCP
	sock.inconmode=PL_SOCK_INCONMODE_ANY_IP_ANY_PORT
	sock.allowedinterfaces="WLN,NET"
	sock.localportlist="1000"
	sock.rxbuffrq(sys.freebuffpages-5)
	sock.txbuffrq(1)
	sys.buffalloc
	
	sock.num=prevsock

end sub

sub set_baudrate(baudrate as dword)
	
	select case baudrate
		case 1200:		ser.baudrate=ser.div9600*8
		case 2400:		ser.baudrate=ser.div9600*4
		case 4800:		ser.baudrate=ser.div9600*2 
		case 9600:		ser.baudrate=ser.div9600   
		case 19200:		ser.baudrate=ser.div9600/2 
		case 38400:		ser.baudrate=ser.div9600/4
		case 56000:		ser.baudrate=ser.div9600/5
		case 57600:		ser.baudrate=ser.div9600/6
		case 115200:	ser.baudrate=ser.div9600/12
		case 128000:	ser.baudrate=ser.div9600/13 
		case 153600:	ser.baudrate=ser.div9600/16
		case 230400:	ser.baudrate=ser.div9600/24
		case 256000:	ser.baudrate=ser.div9600/26
		case 460800:	ser.baudrate=ser.div9600/48
		case 921600:	ser.baudrate=ser.div9600/96
	end select
	
end sub


	




sub device_firmware_read_header()	

	if device_firmware_bytes_available() >= 8 then	
		current_fw_upg_state.fw_numfiles = device_firmware_read_32_uint()
		current_fw_upg_state.fw_totalsize = device_firmware_read_32_uint()
		current_fw_upg_state.fw_total_remaining = current_fw_upg_state.fw_totalsize
		if current_fw_upg_state.fw_numfiles > 0 then
			current_fw_upg_state.state = PL_FW_UPG_READ_FW_TYPE		
		else 
			current_fw_upg_state.fw_fail_reason = PL_FW_FAIL_NUMFILES
			current_fw_upg_state.state = PL_FW_UPG_FAIL
			on_firmware_update_complete(current_fw_upg_state)
		end if
	end if
	
end sub

sub device_firmware_read_fw_type()

	dim l as byte(4)
	if device_firmware_bytes_available()  >= 4 then	
		current_fw_upg_state.fw_types(current_fw_upg_state.fw_currentfile) = device_firmware_read_32_uint()	
		
		select case current_fw_upg_state.fw_types(current_fw_upg_state.fw_currentfile)
		case WA2000_MON:
			wln.setupgraderegion(PL_WLN_UPGRADE_REGION_MONITOR)
		case WA2000_APP:			
			wln.setupgraderegion(PL_WLN_UPGRADE_REGION_MAIN)
		case else:
			
		end select		
		if current_fw_upg_state.fw_types(current_fw_upg_state.fw_currentfile) <= MANIFEST then
			current_fw_upg_state.state = PL_FW_UPG_READ_LEN						
		else 
			current_fw_upg_state.fw_fail_reason = PL_FW_FAIL_INVALID_FW_TYPE
			current_fw_upg_state.state = PL_FW_UPG_FAIL
			on_firmware_update_complete(current_fw_upg_state)
		end if
	end if
	
end sub

sub device_firmware_read_fw_length()

	dim l as byte(4)
	if device_firmware_bytes_available()  >= 4 then
		current_fw_upg_state.fw_remaining = device_firmware_read_32_uint()	
		if current_fw_upg_state.fw_remaining  > 0 then
			current_fw_upg_state.fw_lengths(current_fw_upg_state.fw_currentfile) = current_fw_upg_state.fw_remaining
			current_fw_upg_state.state = PL_FW_UPG_READ_CHECKSUM	
		else 
			current_fw_upg_state.fw_fail_reason = PL_FW_FAIL_INVALID_FW_LENGTH
			current_fw_upg_state.state = PL_FW_UPG_FAIL
			on_firmware_update_complete(current_fw_upg_state)
		end if
	end if
	
end sub

sub device_firmware_read_chekcsum()	

	dim l as byte(4)
	if device_firmware_bytes_available()  >= 4 then
		current_fw_upg_state.fw_checksums(current_fw_upg_state.fw_currentfile) = device_firmware_read_32_uint()		 
		current_fw_upg_state.state = PL_FW_UPG_READ_FW
		on_firmware_update_start(current_fw_upg_state)   'Let the app know which file will be upgraded. 
	end if
	
end sub


#if FD_SECTOR_SIZE=256
dim fw_buffer as string(128)=""
sub device_firmware_write_tios_app(fw as string) 
	fd.buffernum=0
	if (current_fw_upg_state.fw_page mod 2 ) = 0 then
		if current_fw_upg_state.fw_remaining=0 then
			fw=fw+strgen(FW_UPG_BLK_LEN-len(fw),"\x00")
			fw_buffer=fw
			fw=""
			goto set_sector
		else
			fw_buffer=fw
		end if
	else 
set_sector:
		if current_fw_upg_state.fw_remaining=0 then
			fw=fw+strgen(FW_UPG_BLK_LEN-len(fw),"\x00")
		end if
		fd.setbuffer(fw_buffer , 0)
		fd.setbuffer(fw, 128) 	
		fd.setsector(current_fw_upg_state.fw_sector)			 				
		current_fw_upg_state.fw_sector = current_fw_upg_state.fw_sector + 1
	end if

end sub

#elif FD_SECTOR_SIZE=512

dim fw_buffer(4) as string(128)

dim fw_buffer2(4) as string(128)

sub device_firmware_write_tios_app(fw as string) 
	fd.buffernum=0
	
	dim i as byte = current_fw_upg_state.fw_page mod 4
	dim lastWrite as boolean = (current_fw_upg_state.fw_remaining=0)
	
	if lastWrite then
		fw=fw+strgen(FW_UPG_BLK_LEN-len(fw),"\x00")
	end if
	
	fw_buffer(i)=fw
	
	if i = 3 or lastWrite then
		fd.flush
		fd.setbuffer(fw_buffer(0) , 0)
		fd.setbuffer(fw_buffer(1), 128) 	
		fd.setbuffer(fw_buffer(2), 256) 	
		fd.setbuffer(fw_buffer(3), 384) 
		if fd.setsector(current_fw_upg_state.fw_sector) <> PL_FD_STATUS_OK then
			
			sys.halt
			
		end if
		
		
		if fd.getsector(current_fw_upg_state.fw_sector) <> PL_FD_STATUS_OK then
			sys.halt
		end if
		fw_buffer2(0) = fd.getbuffer(0,128)
		fw_buffer2(1) = fd.getbuffer(128,128)
		fw_buffer2(2) = fd.getbuffer(256,128)
		fw_buffer2(3) = fd.getbuffer(384,128)

		if fw_buffer2(0) <> fw_buffer(0) or
			fw_buffer2(1) <> fw_buffer(1) or
			fw_buffer2(2) <> fw_buffer(2) or
			fw_buffer2(3) <> fw_buffer(3) then 
			sys.halt
		end if

	current_fw_upg_state.fw_sector = current_fw_upg_state.fw_sector + 1
		
		
		fw_buffer(0)= ""
		fw_buffer(1)= ""
		fw_buffer(2)= ""
		fw_buffer(3)= ""
	end if	

end sub

#else 

#error "You must define the fd sector size"

#endif 
sub device_firmware_write_wa2000_mon_app(fw as string) 			
	wln.writeflashpage(fw)	
end sub

sub device_firmware_read_manifest(manifest as string)
	
	
	
end sub


function device_firmware_upload_update() as no_yes
	
	pat.play(PAT_GREEN_ON,PL_PAT_CANINT)
	led_upgrade_pattern()
	device_firmware_upload_update = YES
	select case current_fw_upg_state.state
		case PL_FW_UPG__INIT:
			device_firmware_download_init()
		case PL_FW_READ_HEADER:
			device_firmware_read_header()
		case PL_FW_UPG_READ_FW_TYPE:
			device_firmware_read_fw_type()
		case PL_FW_UPG_READ_LEN:
			device_firmware_read_fw_length()
		case PL_FW_UPG_READ_CHECKSUM:
			device_firmware_read_chekcsum()
		case PL_FW_UPG_READ_FW:
			device_firmware_get_fw_block(current_fw_upg_state)
		case PL_FW_UPG_FAIL:
			on_firmware_update_complete(current_fw_upg_state)
			device_firmware_upload_update = NO 
		case PL_FW_UPG_CANCEL:
			on_firmware_update_complete(current_fw_upg_state)
			device_firmware_upload_update = NO 
	end select
	
end function

sub led_upgrade_pattern()

	if sys.timercount32-pattern_timer>=1 then
		if led_detect_timer<4 then
			led_detect_timer=led_detect_timer+1
		else
			led_detect_timer=0
		end if
		pattern_timer = sys.timercount32
	end if
	
	select case led_detect_timer
	case 0:
		set_LED(&b00001)
	case 1:
		set_LED(&b00010)
	case 2:
		set_LED(&b00100)
	case 3:
		set_LED(&b01000)
	case 4:
		set_LED(&b10000)
	end select	

end sub

public function device_firmware_upload_async(source as PL_FW_UPG_SOURCE, number as byte) as no_yes	
	
	device_firmware_init(source, number) 'Move parameters below into firmware init
 	device_firmware_upload_async=device_firmware_upload_update()

end function


function get_fw_upg_state() as pl_upg_state_t 

	get_fw_upg_state=current_fw_upg_state
	
end function


function get_firmware_index(fwtype as PL_UPG_FW_TYPE) as integer
	dim i as integer
	for i=0 to MAX_NUM_FILE_UPG-1
		if current_fw_upg_state.fw_types(i)=fwtype then
			get_firmware_index = i
			exit function
		end if
	next i
	get_firmware_index = -1
end function 