#define DHCP_DEBUG_PRINT 1 
#define DNS_DEBUG_PRINT 1 
#define STG_DEBUG_PRINT 1 
#define WLN_WPA 1 
#define WLN_ENABLED 1 
#define GA1000 0
'#define FD_SECTOR_SIZE 256
#define FD_SECTOR_SIZE 512

'Wi-Fi setup

#define WLN_WPA 1
#define WLN_AVAILABLE 1
#define WLN_DEBUG_PRINT 1

#if PLATFORM_ID=EM500 or PLATFORM_ID=EM500W or PLATFORM_ID=EM1202W
	#define WLN_RESET_MODE 1 'there will be no dedicated reset, and all other lines are fixed
#elif PLATFORM_ID=EM1206 or PLATFORM_ID=EM1206W or PLATFORM_ID=DS1101W or PLATFORM_ID=DS1102W or PLATFORM_ID=EM1206N or PLATFORM_ID=DS1101N or PLATFORM_ID=DS1102N 
	#define WLN_CLK PL_IO_NUM_14
	#define WLN_CS PL_IO_NUM_15
	#define WLN_DI PL_IO_NUM_12
	#define WLN_DO PL_IO_NUM_13
	#define WLN_RST PL_IO_NUM_11	
	#define CTS_MAP PL_INT_NUM_2  			
	#define RTS_MAP PL_IO_NUM_3_TX1_INT3		
#else
	'EM1000, NB1010,...
	#define WLN_CLK PL_IO_NUM_53
	#define WLN_CS PL_IO_NUM_49
	'Used for internal debugging
#if TIBBO_DEBUG_INTERNAL
	#define WLN_DI PL_IO_NUM_27
	#define WLN_DO PL_IO_NUM_25
#else
	#define WLN_DI PL_IO_NUM_52
	#define WLN_DO PL_IO_NUM_50
#endif
	#define WLN_RST PL_IO_NUM_51
	
	#define CTS_MAP PL_IO_NUM_0
	#define RTS_MAP PL_IO_NUM_16_INT0
#endif

'Libraries

include "sock\trunk\sock.tbh"
include "settings\trunk\settings.tbh" 'this lib is necessary to save pre-shared master key
includepp "resources\settings.xtxt"
include "wln\trunk\wln.tbh"
include "dhcp\trunk\dhcp.tbh"
include "dns\trunk\dns.tbh"

'Functions

declare sub init()
declare sub get_module_type()
declare sub init_fd()
declare sub init_web_receive_socket()
declare sub init_http_sockets()
declare sub init_sockets()
declare function upload_file() as ok_ng
declare sub update_state()
declare sub get_method_value_baud()
declare sub skip_http_headers(request_socket as byte)
declare function connect_to_ap(byref ap_name as string, security_mode as pl_wln_security_modes, byref key as string, domain as pl_wln_domains) as en_wln_status_codes
declare sub upgrade_delay(filesize as dword, region as pl_wln_upgrade_regions)
declare sub delay_ms(ms as dword)
declare sub reset_wln()
declare sub init_wln_io()
declare sub update_device(region as pl_wln_upgrade_regions, length as dword, checksum as dword)
declare sub upgrade_delay(filesize as dword, region as pl_wln_upgrade_regions)
declare sub start_dns(domainName as string)
declare sub send_request(interface as pl_sock_interfaces)
declare sub init_LEDS()
declare sub set_LED(pattern as byte)
declare sub led_upgrade_pattern()


declare function get_path(url as string) as string
declare function get_domain_name(url as string) as string
declare function get_port(url as string) as word
declare function is_ip_address(domain_name as string) as boolean

const DHCP_FAIL_LIMIT=1 'max number of DHCP retry "batches"
const ALT_NET_IP="192.168.1.40"
const ALT_NET_GATEWAY_IP="192.168.1.1"
const ALT_NET_NETMASK="255.255.255.0"
const ALT_WLN_IP="192.168.1.41"
const ALT_WLN_GATEWAY_IP="192.168.1.1"
const ALT_WLN_NETMASK="255.255.255.0"


type upgrade_install_state
	state as ok_ng
end type

enum http_req_states
	dns_not_acquired,
	dns_acquired,
	headers_removed	
end enum

type current_http_req_state
	state as http_req_states
end type

type socket_assignment
	dns_socket as byte
	upgrade_socket as byte
	http_socket as byte
end type

type url
	firmware_url as string
end type

declare socket_number as socket_assignment
declare current_upgrade_install_state as upgrade_install_state
declare http_req_state as current_http_req_state
declare download_url as url

const PAT_ONE_SHORT_GREEN=			"---------------G~"
const PAT_TWO_SHORT_GREEN=			"-------------G-G~"
const PAT_THREE_SHORT_GREEN=		"-----------G-G-G"
const PAT_THREE_SHORT_BOTH=			"--B-B-B--"
const PAT_GREEN_ON=					"G~"
const PAT_LONG_RED=					"RRRRRRRR-~"
